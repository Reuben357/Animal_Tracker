package database;

import models.Animal;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.sql2o.Connection;


import java.util.Collections;
import java.util.List;

public class AnimalDao {
    List<Animal> animals, showAnimal;
    static final Logger animalsDAOLogger = LoggerFactory.getLogger(AnimalDao.class.getSimpleName());
    private static final Connection databaseConnection = Database.databaseConnection.open();

    public AnimalDao() {
    }

    public Animal createAnimal(Animal animal) {
        try(databaseConnection) {
            databaseConnection.getJdbcConnection().setAutoCommit(false);
            String insertAnimalQuery = "INSERT INTO public.animals(name, age, health_status, is_endangered, sighting)" +
                    "VALUES (:name, :age, :health_status, :is_endangered, :sighting)";
            // insert data into database and get autogenerated primary key as result
            int animal_id = (int) databaseConnection.createQuery(insertAnimalQuery, true)
                    .addParameter("name", animal.getName())
                    .addParameter("age", animal.getAge())
                    .addParameter("health_status", animal.getHealthStatus())
                    .addParameter("is_endangered", animal.isEndangered())
                    .addParameter("sighting", animal.getSighting())
                    .executeUpdate()
                    .getKey();

            databaseConnection.commit();

            // update the animal object with the returned id
            animal.setId(animal_id);

        } catch (Exception exception) {
            animalsDAOLogger.error("Could not save data, error: {}", exception.getLocalizedMessage());
        }
        animalsDAOLogger.info("Returned animal is {}", animal.toString());
        return animal;
    }

    public List<Animal> getAllAnimals() {
        String getAllAnimalsQuery = "SELECT *  FROM animals";
        try(databaseConnection) {
            animals  =  databaseConnection.createQuery(getAllAnimalsQuery).executeAndFetch(Animal.class);

            if (animals == null) {
                animals = Collections.emptyList();
            }
        } catch (Exception exception) {
            animalsDAOLogger.error("An error occurred: {}", exception.getLocalizedMessage());
        }
        return animals;
    }

    public List<Animal> getAnimalById(int animalId) {
        String getAnimalById = "SELECT * FROM public.animals WHERE id = :animal_id";
        try (Connection connection = Database.databaseConnection.open()) {
            showAnimal  = connection.createQuery(getAnimalById)
                    .addParameter("animal_id", animalId)
                    .executeAndFetch(Animal.class);

            if (showAnimal == null) {
                showAnimal = Collections.emptyList();
            }
        } catch (Exception exception) {
            animalsDAOLogger.error("An error occurred: {}", exception.getLocalizedMessage());
        }
        return showAnimal;
    }

    public void updateAnimal(int animalId,
                             String name,
                             String age,
                             String healthStatus,
                             boolean isEndangered,
                             String sighting){
        String updateAnimalQuery = "UPDATE public.animals set VALUES (:name, :age, :healthStatus, :isEndangered)" +
                "WHERE = :animal_id";
        try(Connection connection = Database.databaseConnection.open()){
            connection.createQuery(updateAnimalQuery)
                    .addParameter("name", name)
                    .addParameter("age", age)
                    .addParameter("healthStatus", healthStatus)
                    .addParameter("isEndangered", isEndangered)
                    .addParameter("animal_id", animalId)
                    .addParameter("sighting", sighting)
                    .executeUpdate();
        }
    }
}
